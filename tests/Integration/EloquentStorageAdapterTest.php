<?php namespace Tests\Integration;

use LaravelPrometheusStorageAdapter\EloquentStorageAdapter;
use Prometheus\Storage\Adapter;
use Tests\Constraints\AdapterCollectedMetric;
use Tests\Constraints\AdapterCollectedSample;
use Tests\TestCase;

class EloquentStorageAdapterTest extends TestCase
{
    /**
     * @var EloquentStorageAdapter
     */
    private $adapter;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->adapter = new EloquentStorageAdapter();
    }

    public function test_updateCounter_creates_the_metric_if_it_doesnt_exist()
    {
        $this->adapter->updateCounter([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'help' => 'A test metric',
        ]);

        $this->assertAdapterCollectedCounter('test_metric', ['color'], 'A test metric');
    }

    public function test_updateCounter_creates_a_sample_if_it_doesnt_exist()
    {
        $this->adapter->updateCounter([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'help' => 'A test metric',
        ]);

        $this->assertAdapterCollectedSample('counter', 'test_metric', ['color' => 'blue'], 1);
    }

    public function test_updateCounter_updates_existing_sample()
    {
        $this->adapter->updateCounter([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'help' => 'A test metric'
        ]);

        $this->adapter->updateCounter([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'help' => 'A test metric'
        ]);

        $this->assertAdapterCollectedSample('counter', 'test_metric', ['color' => 'blue'], 2);
    }

    public function test_updateCounter_with_reset_operation_puts_counter_to_zero()
    {
        $this->adapter->updateCounter([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'help' => 'A test metric'
        ]);

        $this->adapter->updateCounter([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'command' => Adapter::COMMAND_SET,
            'help' => 'A test metric'
        ]);

        $this->assertAdapterCollectedSample('counter', 'test_metric', ['color' => 'blue'], 0);
    }

    public function test_updateGauge_creates_metric_if_it_doesnt_exist()
    {
        $this->adapter->updateGauge([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'command' => Adapter::COMMAND_SET,
            'value' => 5,
            'help' => 'A test metric',
        ]);

        $this->assertAdapterCollectedGauge('test_metric', ['color'], 'A test metric');
    }

    public function test_updateGauge_creates_sample_if_it_doesnt_exist()
    {
        $this->adapter->updateGauge([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'command' => Adapter::COMMAND_SET,
            'value' => 5,
            'help' => 'A test metric',
        ]);

        $this->assertAdapterCollectedSample('gauge', 'test_metric', ['color' => 'blue'], 5);
    }

    public function test_updateGauge_increases_existing_sample_by_value()
    {
        $this->adapter->updateGauge([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'value' => 2,
            'help' => 'A test metric'
        ]);

        $this->adapter->updateGauge([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'value' => 5,
            'help' => 'A test metric'
        ]);

        $this->assertAdapterCollectedSample('gauge', 'test_metric', ['color' => 'blue'], 7);
    }

    public function test_updateGauge_decreases_sample_if_value_is_negative()
    {
        $this->adapter->updateGauge([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'value' => 7,
            'help' => 'A test metric'
        ]);

        $this->adapter->updateGauge([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'value' => -3,
            'help' => 'A test metric'
        ]);

        $this->assertAdapterCollectedSample('gauge', 'test_metric', ['color' => 'blue'], 4);
    }

    public function test_updateGauge_sets_sample_to_value_with_set_operation()
    {
        $this->adapter->updateGauge([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'value' => 7,
            'help' => 'A test metric'
        ]);

        $this->adapter->updateGauge([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'command' => Adapter::COMMAND_SET,
            'value' => 5,
            'help' => 'A test metric'
        ]);

        $this->assertAdapterCollectedSample('gauge', 'test_metric', ['color' => 'blue'], 5);
    }

    public function test_updateHistogram_creates_metric_if_it_doesnt_exist()
    {
        $this->adapter->updateHistogram([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'buckets' => [1,2,3,5,8,13],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'value' => 12,
            'help' => 'A test metric'
        ]);

        $this->assertAdapterCollectHistogram('test_metric', ['color'], 'A test metric');
    }

    public function test_updateHistogram_creates_sample_if_it_doesnt_exist()
    {
        $this->adapter->updateHistogram([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'buckets' => [1,2,3,5,8,13],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'value' => 12,
            'help' => 'A test metric'
        ]);

        $this->assertAdapterCollectedSample(
            'histogram',
            'test_metric',
            'test_metric_count',
            ['color' => 'blue'],
            1
        );
        $this->assertAdapterCollectedSample(
            'histogram',
            'test_metric',
            'test_metric_sum',
            ['color' => 'blue'],
            12
        );
    }

    public function test_updateHistogram_creates_buckets_if_they_dont_exist()
    {
        $this->adapter->updateHistogram([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'buckets' => [1,2,4],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'value' => 12,
            'help' => 'A test metric'
        ]);

        $this->assertAdapterCollectedHistogramSamples(
            'test_metric',
            ['color' => 'blue'],
            [1 => 0, 2 => 0, 4 => 0, '+Inf' => 1]
        );
    }

    public function test_updateHistogram_increases_count_of_all_buckets_value_is_lower_than()
    {
        $this->adapter->updateHistogram([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'buckets' => [1,2,4,8],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'value' => 3,
            'help' => 'A test metric'
        ]);

        $this->assertAdapterCollectedHistogramSamples(
            'test_metric',
            ['color' => 'blue'],
            [1 => 0, 2 => 0, 4 => 1, 8 => 1, '+Inf' => 1]
        );

        $this->adapter->updateHistogram([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'buckets' => [1,2,4,8],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'value' => 5,
            'help' => 'A test metric'
        ]);

        $this->assertAdapterCollectedHistogramSamples(
            'test_metric',
            ['color' => 'blue'],
            [1 => 0, 2 => 0, 4 => 1, 8 => 2, '+Inf' => 2]
        );
    }

    public function test_updateHistogram_adds_the_value_to_the_sum_sample()
    {
        $this->adapter->updateHistogram([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'buckets' => [1,2,4,8],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'value' => 3,
            'help' => 'A test metric'
        ]);

        $this->adapter->updateHistogram([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'buckets' => [1,2,4,8],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'value' => 4,
            'help' => 'A test metric'
        ]);

        $this->assertAdapterCollectedSample(
            'histogram',
            'test_metric',
            'test_metric_sum',
            ['color' => 'blue'],
            7
        );
    }

    public function test_updateHistogram_increases_the_counter_of_the_count_sample()
    {
        $this->adapter->updateHistogram([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'buckets' => [1,2,4,8],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'value' => 7,
            'help' => 'A test metric'
        ]);

        $this->adapter->updateHistogram([
            'name' => 'test_metric',
            'labelNames' => ['color'],
            'labelValues' => ['blue'],
            'buckets' => [1,2,4,8],
            'command' => Adapter::COMMAND_INCREMENT_INTEGER,
            'value' => 2,
            'help' => 'A test metric'
        ]);

        $this->assertAdapterCollectedSample(
            'histogram',
            'test_metric',
            'test_metric_count',
            ['color' => 'blue'],
            2
        );
    }

    private function assertAdapterCollectedCounter($name, $labels, $help)
    {
        $this->assertAdapterCollectedMetric('counter', ...func_get_args());
    }

    private function assertAdapterCollectedGauge($name, $labels, $help)
    {
        $this->assertAdapterCollectedMetric('gauge', ...func_get_args());
    }

    private function assertAdapterCollectHistogram($name, $labels, $help)
    {
        $this->assertAdapterCollectedMetric('histogram', ...func_get_args());
    }

    private function assertAdapterCollectedMetric($type, $name, $labels, $help)
    {
        $result = $this->adapter->collect();
        self::assertThat($result, new AdapterCollectedMetric($type, $name, $labels, $help));
    }

    private function assertAdapterCollectedHistogramSamples($name, $labels, $buckets)
    {
        foreach ($buckets as $bucket => $value) {
            $this->assertAdapterCollectedSample(
                'histogram',
                $name,
                $name . '_bucket',
                $labels,
                ['le' => (string)$bucket],
                $value
            );
        }
    }

    private function assertAdapterCollectedSample(...$args)
    {
        $result = $this->adapter->collect();
        self::assertThat($result, new AdapterCollectedSample(...$args));
    }
}